# Treinamento de Modelos de Machine Learning

## Exemplo 1: Regressão Linear
```python
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Criando dados de exemplo
X = np.random.randn(100, 2)
y = 2 * X[:, 0] + 3 * X[:, 1] + np.random.normal(0, 0.1, 100)

# Dividindo dados em treino e teste
X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.2)

# Treinando modelo
modelo = LinearRegression()
modelo.fit(X_treino, y_treino)

# Avaliando modelo
y_pred = modelo.predict(X_teste)
mse = mean_squared_error(y_teste, y_pred)
r2 = r2_score(y_teste, y_pred)

print(f"MSE: {mse:.3f}")
print(f"R²: {r2:.3f}")
```

## Exemplo 2: Classificação com Random Forest
```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Criando dados de classificação
X, y = make_classification(n_samples=100, n_features=4, n_classes=2)

# Dividindo dados
X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.2)

# Treinando modelo
rf = RandomForestClassifier(n_estimators=100)
rf.fit(X_treino, y_treino)

# Avaliando modelo
y_pred = rf.predict(X_teste)
print("\nRelatório de Classificação:")
print(classification_report(y_teste, y_pred))
```

## Exemplo 3: Validação Cruzada
```python
from sklearn.model_selection import cross_val_score, KFold

# Criando dados
X, y = make_classification(n_samples=100, n_features=4)

# Configurando validação cruzada
kf = KFold(n_splits=5, shuffle=True)

# Avaliando modelo com validação cruzada
scores = cross_val_score(rf, X, y, cv=kf)
print(f"\nScores de Validação Cruzada: {scores}")
print(f"Média dos Scores: {scores.mean():.3f} (+/- {scores.std() * 2:.3f})")
```

## Dicas importantes:
1. Use validação cruzada para avaliação robusta
2. Ajuste hiperparâmetros com GridSearchCV
3. Monitore overfitting
4. Salve modelos treinados 