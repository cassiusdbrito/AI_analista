# Análise de Séries Temporais com Python

## Exemplo 1: Carregamento e Visualização
```python
import pandas as pd
import matplotlib.pyplot as plt

# Criando dados de série temporal
datas = pd.date_range(start='2023-01-01', periods=100, freq='D')
valores = np.random.normal(100, 10, 100).cumsum()
serie = pd.Series(valores, index=datas)

# Visualizando série temporal
plt.figure(figsize=(12, 6))
plt.plot(serie.index, serie.values)
plt.title('Série Temporal')
plt.xlabel('Data')
plt.ylabel('Valor')
plt.grid(True)
plt.show()
```

## Exemplo 2: Decomposição da Série
```python
from statsmodels.tsa.seasonal import seasonal_decompose

# Criando dados com tendência e sazonalidade
t = np.arange(100)
tendencia = 0.1 * t
sazonalidade = 10 * np.sin(2 * np.pi * t / 12)
ruido = np.random.normal(0, 1, 100)
serie = pd.Series(tendencia + sazonalidade + ruido, index=datas)

# Decompondo a série
decomposicao = seasonal_decompose(serie, period=12)

# Plotando componentes
fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(12, 10))
decomposicao.observed.plot(ax=ax1)
ax1.set_title('Série Original')
decomposicao.trend.plot(ax=ax2)
ax2.set_title('Tendência')
decomposicao.seasonal.plot(ax=ax3)
ax3.set_title('Sazonalidade')
decomposicao.resid.plot(ax=ax4)
ax4.set_title('Resíduos')
plt.tight_layout()
plt.show()
```

## Exemplo 3: Previsão com ARIMA
```python
from statsmodels.tsa.arima.model import ARIMA

# Ajustando modelo ARIMA
modelo = ARIMA(serie, order=(1, 1, 1))
resultado = modelo.fit()

# Fazendo previsão
previsao = resultado.forecast(steps=30)

# Plotando resultados
plt.figure(figsize=(12, 6))
plt.plot(serie.index, serie.values, label='Dados Reais')
plt.plot(previsao.index, previsao.values, label='Previsão')
plt.title('Previsão de Série Temporal')
plt.legend()
plt.grid(True)
plt.show()
```

## Dicas importantes:
1. Verifique estacionariedade dos dados
2. Identifique padrões sazonais
3. Escolha o modelo adequado
4. Avalie a qualidade da previsão 